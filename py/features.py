# coding:utf-8

import torch
import os
import json


class Features:
    idxes = [(0, 1, 2, 0, 0, 1, 2, 0), (2, 5, 8, 2, 20, 23, 26, 0), (8, 7, 6, 8, 80, 79, 78, 0), (6, 3, 0, 6, 60, 57, 54, 0), (2, 1, 0, 2, 20, 19, 18, 0), (8, 5, 2, 8, 80, 77, 74, 0), (6, 7, 8, 6, 60, 61, 62, 0), (0, 3, 6, 0, 0, 3, 6, 0), (0, 1, 2, 0, 2, 5, 8, 0), (2, 5, 8, 2, 26, 25, 24, 0), (8, 7, 6, 8, 78, 75, 72, 0), (6, 3, 0, 6, 54, 55, 56, 0), (2, 1, 0, 2, 18, 21, 24, 0), (8, 5, 2, 8, 74, 73, 72, 0), (6, 7, 8, 6, 62, 59, 56, 0), (0, 3, 6, 0, 6, 7, 8, 0), (0, 1, 2, 0, 8, 7, 6, 0), (2, 5, 8, 2, 24, 21, 18, 0), (8, 7, 6, 8, 72, 73, 74, 0), (6, 3, 0, 6, 56, 59, 62, 0), (2, 1, 0, 2, 24, 25, 26, 0), (8, 5, 2, 8, 72, 75, 78, 0), (6, 7, 8, 6, 56, 55, 54, 0), (0, 3, 6, 0, 8, 5, 2, 0), (0, 1, 2, 0, 6, 3, 0, 0), (2, 5, 8, 2, 18, 19, 20, 0), (8, 7, 6, 8, 74, 77, 80, 0), (6, 3, 0, 6, 62, 61, 60, 0), (2, 1, 0, 2, 26, 23, 20, 0), (8, 5, 2, 8, 78, 79, 80, 0), (6, 7, 8, 6, 54, 57, 60, 0), (0, 3, 6, 0, 2, 1, 0, 0), (0, 1, 2, 0, 3, 4, 5, 0), (2, 5, 8, 2, 19, 22, 25, 0), (8, 7, 6, 8, 77, 76, 75, 0), (6, 3, 0, 6, 61, 58, 55, 0), (2, 1, 0, 2, 23, 22, 21, 0), (8, 5, 2, 8, 79, 76, 73, 0), (6, 7, 8, 6, 57, 58, 59, 0), (0, 3, 6, 0, 1, 4, 7, 0), (0, 1, 2, 0, 1, 4, 7, 0), (2, 5, 8, 2, 23, 22, 21, 0), (8, 7, 6, 8, 79, 76, 73, 0), (6, 3, 0, 6, 57, 58, 59, 0), (2, 1, 0, 2, 19, 22, 25, 0), (8, 5, 2, 8, 77, 76, 75, 0), (6, 7, 8, 6, 61, 58, 55, 0), (0, 3, 6, 0, 3, 4, 5, 0), (0, 1, 2, 0, 0, 4, 8, 0), (2, 5, 8, 2, 20, 22, 24, 0), (8, 7, 6, 8, 80, 76, 72, 0), (6, 3, 0, 6, 60, 58, 56, 0), (2, 1, 0, 2, 20, 22, 24, 0), (8, 5, 2, 8, 80, 76, 72, 0), (6, 7, 8, 6, 60, 58, 56, 0), (0, 3, 6, 0, 0, 4, 8, 0), (0, 1, 2, 0, 2, 4, 6, 0), (2, 5, 8, 2, 26, 22, 18, 0), (8, 7, 6, 8, 78, 76, 74, 0), (6, 3, 0, 6, 54, 58, 62, 0), (2, 1, 0, 2, 18, 22, 26, 0), (8, 5, 2, 8, 74, 76, 78, 0), (6, 7, 8, 6, 62, 58, 54, 0), (0, 3, 6, 0, 6, 4, 2, 0), (0, 1, 2, 1, 9, 10, 11, 1), (2, 5, 8, 5, 47, 50, 53, 1), (8, 7, 6, 7, 71, 70, 69, 1), (6, 3, 0, 3, 33, 30, 27, 1), (0, 1, 2, 1, 11, 14, 17, 1), (2, 5, 8, 5, 53, 52, 51, 1), (8, 7, 6, 7, 69, 66, 63, 1), (6, 3, 0, 3, 27, 28, 29, 1), (0, 1, 2, 1, 17, 16, 15, 1), (2, 5, 8, 5, 51, 48, 45, 1), (8, 7, 6, 7, 63, 64, 65, 1), (6, 3, 0, 3, 29, 32, 35, 1), (0, 1, 2, 1, 15, 12, 9, 1), (2, 5, 8, 5, 45, 46, 47, 1), (8, 7, 6, 7, 65, 68, 71, 1), (6, 3, 0, 3, 35, 34, 33, 1), (0, 1, 2, 1, 12, 13, 14, 1), (2, 5, 8, 5, 46, 49, 52, 1), (8, 7, 6, 7, 68, 67, 66, 1), (6, 3, 0, 3, 34, 31, 28, 1), (0, 1, 2, 1, 10, 13, 16, 1), (2, 5, 8, 5, 50, 49, 48, 1), (8, 7, 6, 7, 70, 67, 64, 1), (6, 3, 0, 3, 30, 31, 32, 1), (0, 1, 2, 1, 9, 13, 17, 1), (2, 5, 8, 5, 47, 49, 51, 1), (8, 7, 6, 7, 71, 67, 63, 1), (6, 3, 0, 3, 33, 31, 29, 1), (0, 1, 2, 1, 11, 13, 15, 1), (2, 5, 8, 5, 53, 49, 45, 1), (8, 7, 6, 7, 69, 67, 65, 1), (6, 3, 0, 3, 27, 31, 35, 1), (3, 4, 5, 3, 27, 28, 29, 2), (1, 4, 7, 1, 11, 14, 17, 2), (5, 4, 3, 5, 53, 52, 51, 2), (7, 4, 1, 7, 69, 66, 63, 2), (5, 4, 3, 5, 47, 46, 45, 2), (7, 4, 1, 7, 71, 68, 65, 2), (3, 4, 5, 3, 33, 34, 35, 2), (1, 4, 7, 1, 9, 12, 15, 2), (3, 4, 5, 3, 29, 32, 35, 2), (1, 4, 7, 1, 17, 16, 15, 2), (5, 4, 3, 5, 51, 48, 45, 2), (7, 4, 1, 7, 63, 64, 65, 2), (5, 4, 3, 5, 45, 48, 51, 2), (7, 4, 1, 7, 65, 64, 63, 2), (3, 4, 5, 3, 35, 32, 29, 2), (1, 4, 7, 1, 15, 16, 17, 2), (3, 4, 5, 3, 30, 31, 32, 2), (1, 4, 7, 1, 10, 13, 16, 2), (5, 4, 3, 5, 50, 49, 48, 2), (7, 4, 1, 7, 70, 67, 64, 2), (3, 4, 5, 3, 28, 31, 34, 2), (1, 4, 7, 1, 14, 13, 12, 2), (5, 4, 3, 5, 52, 49, 46, 2), (7, 4, 1, 7, 66, 67, 68, 2), (3, 4, 5, 3, 27, 31, 35, 2), (1, 4, 7, 1, 11, 13, 15, 2), (5, 4, 3, 5, 53, 49, 45, 2), (7, 4, 1, 7, 69, 67, 65, 2), (5, 4, 3, 5, 47, 49, 51, 2), (7, 4, 1, 7, 71, 67, 63, 2), (3, 4, 5, 3, 33, 31, 29, 2), (1, 4, 7, 1, 9, 13, 17, 2), (3, 4, 5, 4, 36, 37, 38, 3), (1, 4, 7, 4, 38, 41, 44, 3), (5, 4, 3, 4, 44, 43, 42, 3), (7, 4, 1, 4, 42, 39, 36, 3), (3, 4, 5, 4, 38, 41, 44, 3), (1, 4, 7, 4, 44, 43, 42, 3), (5, 4, 3, 4, 42, 39, 36, 3), (7, 4, 1, 4, 36, 37, 38, 3), (3, 4, 5, 4, 39, 40, 41, 3), (1, 4, 7, 4, 37, 40, 43, 3), (3, 4, 5, 4, 37, 40, 43, 3), (1, 4, 7, 4, 41, 40, 39, 3), (3, 4, 5, 4, 36, 40, 44, 3), (1, 4, 7, 4, 38, 40, 42, 3), (5, 4, 3, 4, 38, 40, 42, 3), (1, 4, 7, 4, 36, 40, 44, 3), (0, 4, 8, 0, 0, 1, 2, 4), (2, 4, 6, 2, 20, 23, 26, 4), (8, 4, 0, 8, 80, 79, 78, 4), (6, 4, 2, 6, 60, 57, 54, 4), (2, 4, 6, 2, 20, 19, 18, 4), (8, 4, 0, 8, 80, 77, 74, 4), (6, 4, 2, 6, 60, 61, 62, 4), (0, 4, 8, 0, 0, 3, 6, 4), (0, 4, 8, 0, 2, 5, 8, 4), (2, 4, 6, 2, 26, 25, 24, 4), (8, 4, 0, 8, 78, 75, 72, 4), (6, 4, 2, 6, 54, 55, 56, 4), (2, 4, 6, 2, 18, 21, 24, 4), (8, 4, 0, 8, 74, 73, 72, 4), (6, 4, 2, 6, 62, 59, 56, 4), (0, 4, 8, 0, 6, 7, 8, 4), (0, 4, 8, 0, 3, 4, 5, 4), (2, 4, 6, 2, 19, 22, 25, 4), (8, 4, 0, 8, 77, 76, 75, 4), (6, 4, 2, 6, 61, 58, 55, 4), (2, 4, 6, 2, 23, 22, 21, 4), (8, 4, 0, 8, 79, 76, 73, 4), (6, 4, 2, 6, 57, 58, 59, 4), (0, 4, 8, 0, 1, 4, 7, 4), (0, 4, 8, 0, 0, 4, 8, 4), (2, 4, 6, 2, 20, 22, 24, 4), (8, 4, 0, 8, 80, 76, 72, 4), (6, 4, 2, 6, 60, 58, 56, 4), (0, 4, 8, 0, 2, 4, 6, 4), (2, 4, 6, 2, 26, 22, 18, 4), (8, 4, 0, 8, 78, 76, 74, 4), (6, 4, 2, 6, 54, 58, 62, 4), (0, 4, 8, 4, 36, 37, 38, 5), (2, 4, 6, 4, 38, 41, 44, 5), (8, 4, 0, 4, 44, 43, 42, 5), (6, 4, 2, 4, 42, 39, 36, 5), (0, 4, 8, 4, 38, 41, 44, 5), (2, 4, 6, 4, 44, 43, 42, 5), (8, 4, 0, 4, 42, 39, 36, 5), (6, 4, 2, 4, 36, 37, 38, 5), (0, 4, 8, 4, 39, 40, 41, 5), (2, 4, 6, 4, 37, 40, 43, 5), (0, 4, 8, 4, 37, 40, 43, 5), (2, 4, 6, 4, 41, 40, 39, 5), (0, 4, 8, 4, 36, 40, 44, 5), (2, 4, 6, 4, 38, 40, 42, 5), (0, 4, 8, 4, 38, 40, 42, 5), (2, 4, 6, 4, 44, 40, 36, 5)]

    # @staticmethod
    # def localpos_to_pos(local_num, local_pos):
    #     pos = local_num * 9 + local_pos
    #     return pos

    @staticmethod
    def make_features(json_string):
        dic = json.loads(json_string)
        features = []

        global_board = dic["global_board"]
        flat_board = dic["flat_board"]
        legal_moves = dic["legal_moves"]

        for g0, g1, g2, gf, pos0, pos1, pos2, _ in Features.idxes:
            feature = [0 for _ in range(16)]

            if global_board[g0] == 1:
                feature[0] = 1
            elif global_board[g0] == 2:
                feature[1] = 1
            elif global_board[g0] == 3:
                feature[2] = 1

            if global_board[g1] == 1:
                feature[3] = 1
            elif global_board[g1] == 2:
                feature[4] = 1
            elif global_board[g1] == 3:
                feature[5] = 1

            if global_board[g2] == 1:
                feature[6] = 1
            elif global_board[g2] == 2:
                feature[7] = 1
            elif global_board[g2] == 3:
                feature[8] = 1

            if global_board[gf] == 0:
                if flat_board[pos0] == 1:
                    feature[9] = 1
                elif flat_board[pos0] == 2:
                    feature[10] = 1

                if flat_board[pos1] == 1:
                    feature[11] = 1
                elif flat_board[pos1] == 2:
                    feature[12] = 1

                if flat_board[pos2] == 1:
                    feature[13] = 1
                elif flat_board[pos2] == 2:
                    feature[14] = 1
            if pos0 in legal_moves or pos1 in legal_moves or pos2 in legal_moves:
                feature[15] = 1

            features.append(feature)

        values = dic["action_values"]
        state_value = dic["state_value"]

        values.append(state_value)

        return features, values
        # return torch.Tensor(features), torch.Tensor(values)
